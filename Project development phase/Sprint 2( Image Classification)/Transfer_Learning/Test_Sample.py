{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP/LMMiLhAGnTpfzM3CWAxn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"5AVKQ5pgTMBS"},"outputs":[],"source":["import torchvision.datasets as dset\n","import torchvision.transforms as transforms\n","import torch\n","import numpy\n","from torchvision import models\n","\n","dataset = dset.ImageFolder(root=\"sample\",\n","                        transform=transforms.Compose([\n","                            transforms.Resize([224, 224]),\n","                            transforms.ToTensor(),\n","                            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),\n","                        ]))\n","dataloader = torch.utils.data.DataLoader(dataset,\n","                                        batch_size=1,\n","                                        shuffle=False,\n","                                        num_workers=0)\n","\n","\n","model = models.resnet50()\n","model.load_state_dict(torch.load('checkpoint/epoche-5', map_location='cpu'))\n","model.eval()\n","\n","\n","output = model(list(dataloader)[0][0])\n","_, predicted = torch.max(output, 1)\n","\n","if predicted[0].numpy() == 1:\n","    print(\"normal\")\n","else:\n","    print(\"diseased\")"]},{"cell_type":"code","source":[],"metadata":{"id":"ifENP_EDTUr8"},"execution_count":null,"outputs":[]}]}